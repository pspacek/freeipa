#!/usr/bin/python2
# Copyright (C) 2014  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import os
import re
import sys

from setuptools.command.sdist import sdist as setuptools_sdist

# from Python 3.5's shlex module
_find_unsafe = re.compile(r'[^\w@%+=:,./-]', getattr(re, 'ASCII', 0)).search


def shlex_quote(s):
    """Return a shell-escaped version of the string *s*."""
    if not s:
        return "''"
    if _find_unsafe(s) is None:
        return s

    # use single quotes, and put single quotes into double quotes
    # the string $'b is then quoted as '$'"'"'b'
    return "'" + s.replace("'", "'\"'\"'") + "'"


class sdist_list(setuptools_sdist):
    """Source distribution list plugin (based on standard sdist)
    """
    description = "create source distributon file list"

    user_options = [
        ('base-dir=', 'b', 'base directory for source files'),
        ('source-list=', 's', 'source list file'),
    ]
    help_options = []
    boolean_options = []

    separator = '\n'

    def initialize_options(self):
        setuptools_sdist.initialize_options(self)
        self.base_dir = None
        self.source_list = None

    def finalize_options(self):
        setuptools_sdist.finalize_options(self)
        if self.base_dir is None:
            self.base_dir = os.path.abspath(os.getcwd())

    def make_distribution(self):
        # Don't create any distribution
        self.archive_files = []

    def run(self):
        setuptools_sdist.run(self)
        self.filelist.sort()
        self.filelist.remove_duplicates()
        filenames = []
        for filename in self.filelist.files:
            filename = os.path.join(self.base_dir, filename)
            filenames.append(shlex_quote(filename))

        if self.source_list is not None:
            with open(self.source_list, 'w') as f:
                f.write(self.separator.join(filenames))
        else:
            print(self.separator.join(filenames))


common_args = dict(
    version="@VERSION@",
    license="GPL",
    author="FreeIPA Developers",
    author_email="freeipa-devel@redhat.com",
    maintainer="FreeIPA Developers",
    maintainer_email="freeipa-devel@redhat.com",
    url="http://www.freeipa.org/",
    download_url="http://www.freeipa.org/page/Downloads",
    platforms=["Linux", "Solaris", "Unix"],
    cmdclass={
        'sdist_list': sdist_list,
    },
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        ("Topic :: System :: Systems Administration :: "
         "Authentication/Directory :: LDAP"),
        "Topic :: Internet :: Name Service (DNS)",
        "Intended Audience :: System Environment/Base",
        "License :: GPL",
        "Programming Language :: Python",
        "Operating System :: POSIX",
        "Operating System :: Unix",
    ],
)

local_path = os.path.dirname(os.path.abspath(sys.argv[0]))
old_path = os.path.abspath(os.getcwd())


def ipasetup(name, doc, **kwargs):
    doclines = doc.split("\n")

    setup_kwargs = common_args.copy()
    setup_kwargs.update(
        name=name,
        description=doclines[0],
        long_description="\n".join(doclines[:2]),
        **kwargs
    )
    # exclude setup helpers from getting installed
    epd = setup_kwargs.setdefault('exclude_package_data', {})
    epd.setdefault('', []).extend(['*/setup.py', '*/ipasetup.py'])

    os.chdir(local_path)
    try:
        # BEFORE importing distutils, remove MANIFEST. distutils doesn't
        # properly update it when the contents of directories change.
        if os.path.isfile('MANIFEST'):
            os.unlink('MANIFEST')
        from setuptools import setup
        return setup(**setup_kwargs)
    finally:
        os.chdir(old_path)
